<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KPI Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            padding: 20px;
        }
        .kpi-card {
            background-color: #f0f0f0;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
        }
        .chart-container {
            width: 100%;
            max-width: 600px;
            margin: 20px auto;
        }
    </style>
</head>
<body>
    <h1>KPI Dashboard</h1>
    
    <div class="dashboard" id="kpi-container"></div>
    
    <!-- Line Chart -->
    <div class="chart-container">
        <canvas id="lineChart"></canvas>
    </div>

    <!-- Bar Chart -->
    <div class="chart-container">
        <canvas id="barChart"></canvas>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Safely parse the initial data
        const initialData = <%- JSON.stringify(initialData) %>;
        let lineChart, barChart;

        // Update KPI cards
        function updateKPIs(data) {
            const container = document.getElementById('kpi-container');
            container.innerHTML = ''; // Clear existing KPIs
            for (const [key, value] of Object.entries(data.kpis)) {
                const kpiElement = document.createElement('div');
                kpiElement.className = 'kpi-card';
                kpiElement.innerHTML = `<h3>${key}</h3><p>${value}</p>`;
                container.appendChild(kpiElement);
            }
        }

        // Update or create the line chart
        function updateLineChart(data) {
            if (lineChart) {
                lineChart.data.labels = data.chartData.labels;
                lineChart.data.datasets[0].data = data.chartData.values;
                lineChart.update();
            } else {
                const ctx = document.getElementById('lineChart').getContext('2d');
                lineChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.chartData.labels,
                        datasets: [{
                            label: 'Line Chart Data',
                            data: data.chartData.values,
                            borderColor: 'rgb(75, 192, 192)',
                            tension: 0.1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
        }

        // Update or create the bar chart
        function updateBarChart(data) {
            if (barChart) {
                barChart.data.labels = data.chartData.labels;
                barChart.data.datasets[0].data = data.chartData.values;
                barChart.update();
            } else {
                const ctx = document.getElementById('barChart').getContext('2d');
                barChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.chartData.labels,
                        datasets: [{
                            label: 'Bar Chart Data',
                            data: data.chartData.values,
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
        }

        

        // Initialize with initial data
        updateKPIs(initialData);
        updateLineChart(initialData);
        updateBarChart(initialData);

        const socket = io();
        socket.on('connect', () => {
            console.log('Connected to server');
        });

        // Listen for updates
        socket.on('data-update', (data) => {
            console.log('Received data:', data);
            updateKPIs(data);
            updateLineChart(data);
            updateBarChart(data);
        });

        socket.on('connect_error', (error) => {
            console.error('Connection error:', error);
        });
    </script>
</body>
</html>
